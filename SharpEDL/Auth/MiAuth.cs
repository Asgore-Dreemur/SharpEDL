using SharpEDL.DataClass;
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Schema;

namespace SharpEDL.Auth
{
    /// <summary>
    /// 为小米设备提供授权/免授权方案
    /// </summary>
    public class MiAuth
    {
        public required FirehoseServer Server { get; set; }

        /// <summary>
        /// 用于免授权的签名
        /// </summary>
        public readonly string[] AuthSigns =
        [
            "BF35D6013A39D6166BE0387E6B9B00FD0E096283F811EDE81594866CF676B41B1A32EA67FBAB4F6D90E45C944B53302A1DA32D94F30A68E1EB116672B02920089AA938F91464D6926C42A93D0EAE88E549A49C00FCF9B1B89EF68A7CD23DEBEB88C01D850ACD52A832BB80134C4B0E2A7A1422E2530C19B309EBA1FF7E123A34DD3B83DCFACDCE45F303D135FE58899E531E1CF7155D48BFF18AB3E5FC1A2E85FBB015DE2A3CFC8EE51AA453F7DEBC4A095861DA1637C8DF4D9CF64EC4A5F45486AD73FB036965B94E1EE8F4077FFB54E90AF0AB52BF02E499517FB7D1028ABCBA1B98951843B2A8C964B4D94801BAF630C6179FA6F86371830A484F2792D491",
            "600000010800936E3A8E573CAD07C167644B61217835D85AD4FDDB7D840A2B7225432FCDA13A7C192CFA979ED16517E6970B1B07DF6C516FEC81F6968FCF7FFDDBC397A162C2CA3E5D76124AA1769F1B2164B39B76930B4CC67519F7F339877677F4E8AF25828682BCBF4E593A57E7E30532699253E0B1CC5D9D0D554AF2BD46D56F18D6E5290BA4A0CAC2431F9F19C4C1A39D7664FFAB48A9E11A559386819835B84DF5675E70D25FDB5123E7B040FE21108F0AE6D7D9D267F2C9C61AD054C68493DC4D33F74D0CF2D4AADCD430152DB67C22A181AD6D7761637F70CBDA884CDC11337203837790E6845CA5A8767930B9C26FDA71272564CA34763D352F5FE4",
            "936E3A8E573CAD07C167644B61217835D85AD4FDDB7D840A2B7225432FCDA13A7C192CFA979ED16517E6970B1B07DF6C516FEC81F6968FCF7FFDDBC397A162C2CA3E5D76124AA1769F1B2164B39B76930B4CC67519F7F339877677F4E8AF25828682BCBF4E59600000110532699253E0B1CC5D9D0D554AF2BD46D56F18D6E5290BA4A0CAC2431F9F19C4C1A39D7664FFAB48A9E11A559386819835B84DF5675E70D25FDB5123E7B040FE21108F0AE6D7D9D267F2C9C61AD054C68493DC4D33F74D0CF2D4AADCD430152DB67C22A181AD6D7761637F70CBDA884CDC11337203837790E6845CA5A8767930B9C26FDA71272564CA34763D352F5FE42AB738FB38A5",
            "936E3A8E573CAD07C167644B61217835D85AD4FDDB7D840A2B7225432FCDA13A7C192CFA979ED16517E6970B1B07DF6C516FEC81F6968FCF7FFDDBC397A162C2CA3E5D76124AA1769F1B2164B39B76930B4CC67519F7F339877677F4E8AF25828682BCBF4E593A57E7E30532699253E0B1CC5D9D0D554AF2BD46D56F18D6E5290BA4A0CAC2431F9F19C4C1A39D7664FFAB48A9E11A559386819835B84DF5675E70D25FDB5123E7B040FE21108F0AE6D7D9D267F2C9C61AD054C68493DC4D33F74D0CF2D4AADCD430152DB67C22A181AD6D7761637F70CBDA884CDC11337203837790E6845CA5A8767930B9C26FDA71272564CA34763D352F5FE42AB738FB38A5",
            "936E3A8E573CAD07C167644B61217835D85AD4FDDB7D840A2B7225432FCDA13A7C192CFA979ED16517E6970B1B07DF6C516FEC81F6968FCF7FFDDBC397A162C2CA3E5D76124AA1769F1B2164B39B76930B4CC67519F7F339877677F4E8AF25828682BCBF4E59600000020532699253E0B1CC5D9D0D554AF2BD46D56F18D6E5290BA4A0CAC2431F9F19C4C1A39D7664FFAB48A9E11A559386819835B84DF5675E70D25FDB5123E7B040FE21108F0AE6D7D9D267F2C9C61AD054C68493DC4D33F74D0CF2D4AADCD430152DB67C22A181AD6D7761637F70CBDA884CDC11337203837790E6845CA5A8767930B9C26FDA71272564CA34763D352F5FE42AB738FB38A5"
        ];

        /// <summary>
        /// 发送签名
        /// </summary>
        /// <param name="hexSign">长度为512的十六进制样式的签名</param>
        /// <exception cref="Exception"></exception>
        public void SendSign(string hexSign)
        {
            Server.Port.Write("<?xml version=\"1.0\" ?><data><sig TargetName=\"sig\" verbose=\"1\" size_in_bytes=\"256\" /></data>");
            QCResponse response = Server.WaitForResponse();
            if (response.Response != "ACK")
                throw new Exception("Error from device\n" + string.Join("", response.Logs));
            byte[] sign = DataHelper.HexStr2Bytes(hexSign);
            Server.Port.Write(sign, 0, sign.Length);
        }

        /// <summary>
        /// 获取用于签名的blob
        /// </summary>
        public string GetBlob()
        {
            Server.Port.Write("<?xml version=\"1.0\" ?><data><sig TargetName=\"req\" /></data>");
            return Encoding.UTF8.GetString(Server.ReadFromDevice());
        }

        /// <summary>
        /// <para>尝试进行免授权</para>
        /// <para>该方法会尝试<see cref="AuthSigns"/>中的所有签名</para>
        /// </summary>
        /// <returns>免授权是否成功</returns>
        public bool BypassAuth()
        {
            foreach (var sign in AuthSigns)
            {
                try
                {
                    SendSign(sign);
                    if (string.Join("", Server.WaitForResponse().Logs).ToLower().Contains("authenticated"))
                        return true;
                }
                catch (Exception)
                {
                    continue;
                }
            }
            return false;
        }
    }
}
